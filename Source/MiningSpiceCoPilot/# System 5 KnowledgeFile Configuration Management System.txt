
# SYSTEM 5: Configuration Management System

## System Overview
The Configuration Management System provides a centralized, hierarchical configuration framework for the SVO+SDF mining architecture. It enables runtime configuration changes, hardware-specific optimizations, and data-driven parameter tuning across all other systems. The architecture supports multiple configuration sources with priority-based override capability, validation, schema definition, and change notification.

## Class Hierarchy

### Interfaces

- `IConfigManager` [IConfigManager.h:~L300-435]
  - Purpose: Core interface for configuration management with hierarchical configuration, priority-based overrides
  - Implemented by: UConfigManager
  - Key methods:
    - `bool Initialize()` - Initialize the manager
    - `void Shutdown()` - Shutdown and cleanup
    - `bool IsInitialized() const` - Check initialization status
    - `bool LoadFromFile(const FString& FilePath, EConfigSourcePriority Priority = EConfigSourcePriority::Game)` - Load config from file
    - `bool GetValue(const FString& Key, FMiningConfigValue& OutValue) const` - Get a raw config value
    - `bool SetValue(const FString& Key, const FMiningConfigValue& Value, EConfigSourcePriority Priority = EConfigSourcePriority::Runtime, EConfigPropagationMode PropagationMode = EConfigPropagationMode::DirectOnly)` - Set a config value with priority
    - `FDelegateHandle RegisterChangeCallback(const FString& Key, const FConfigValueChangedDelegate& Callback)` - Register a value change callback

- `IConfigProvider` [IConfigProvider.h:~L125-215]
  - Purpose: Interface for configuration providers, supplying configuration values from specific sources
  - Implemented by: UConfigProvider, UEngineConfigProvider
  - Key methods:
    - `bool Initialize()` - Initialize the provider
    - `void Shutdown()` - Shutdown and cleanup
    - `bool IsInitialized() const` - Check initialization status
    - `FConfigProviderInfo GetProviderInfo() const` - Get provider metadata
    - `bool GetValue(const FString& Key, FConfigValue& OutValue) const` - Get a value
    - `FConfigOperationResult SetValue(const FString& Key, const FConfigValue& Value)` - Set a value
    - `TArray<FString> GetAllKeys() const` - Get all config keys

- `IConfigValidator` [IConfigValidator.h:~L152-250]
  - Purpose: Interface for configuration validation, ensuring configuration values meet constraints
  - Implemented by: UConfigValidator
  - Key methods:
    - `bool Initialize()` - Initialize the validator
    - `void Shutdown()` - Shutdown and cleanup
    - `bool IsInitialized() const` - Check initialization status
    - `FConfigValidationDetail ValidateValue(const FString& Key, const FMiningConfigValue& Value, bool bAutoCorrect = false)` - Validate a single value
    - `FConfigValidationSummary ValidateAll(class IConfigManager* ConfigManager, bool bAutoCorrect = false)` - Validate all values
    - `bool RegisterValidationRule(const FString& Key, const FMiningConfigValue& MinValue, const FMiningConfigValue& MaxValue, bool bRequired = false, const FMiningConfigValue* DefaultValue = nullptr)` - Register numeric validation rule

- `IConfigSchema` [IConfigSchema.h:~L270-365]
  - Purpose: Interface for configuration schema definition and validation
  - Key methods:
    - `bool Initialize()` - Initialize the schema
    - `void Shutdown()` - Shutdown and cleanup
    - `bool IsInitialized() const` - Check initialization status
    - `FName GetSchemaName() const` - Get schema name
    - `FString GetSchemaVersion() const` - Get schema version
    - `bool RegisterSection(const FConfigSectionSchema& InSection)` - Register a section schema
    - `bool ValidateConfig(const TSharedPtr<FJsonObject>& InData, FConfigValidationResult& OutResult) const` - Validate configuration against schema
    - `TSharedPtr<FJsonObject> CreateDefaultConfig() const` - Create default configuration

### Implementation Classes

- `UConfigManager` [ConfigManager.cpp:~L15-2200]
  - Purpose: Primary implementation of the configuration management system
  - Inherits from: IConfigManager
  - Key methods:
    - `bool Initialize()` - Initialize configuration system [ConfigManager.cpp:~L34-59]
    - `bool LoadFromFile(const FString& FilePath, EConfigSourcePriority Priority)` - Load configuration from file [ConfigManager.cpp:~L89-143]
    - `bool SaveToFile(const FString& FilePath, bool bOnlyModified, EConfigSourcePriority Priority)` - Save configuration to file [ConfigManager.cpp:~L145-199]
    - `FDelegateHandle RegisterChangeCallback(const FString& Key, const FConfigValueChangedDelegate& Callback)` - Register for change notifications [ConfigManager.cpp:~L961-979]
    - `bool RegisterProvider(TSharedPtr<IConfigProvider> Provider)` - Register a configuration provider [ConfigManager.cpp:~L1010-1040]
  - Key members:
    - `TArray<TSharedPtr<IConfigProvider>> Providers` - Registered providers
    - `TSharedPtr<IConfigValidator> Validator` - Configuration validator
    - `TMap<FString, FMiningConfigValue> ValueCache` - Configuration value cache
    - `TMap<FString, FConfigMetadata> ConfigMetadata` - Configuration metadata
    - `TMap<FString, TMap<FDelegateHandle, FConfigValueChangedDelegate>> ChangeCallbacks` - Change notification callbacks
  - Singleton Implementation: 
    - `static UConfigManager* SingletonInstance` - Singleton instance pointer
    - `static IConfigManager& Get()` - Get singleton instance [ConfigManager.cpp:~L998-1008]

- `UConfigProvider` [ConfigProvider.cpp:~L5-401]
  - Purpose: Base implementation of configuration provider with in-memory storage
  - Inherits from: IConfigProvider
  - Key methods:
    - `bool Initialize()` - [ConfigProvider.cpp:~L22-36]
    - `void Shutdown()` - [ConfigProvider.cpp:~L38-56]
    - `FConfigProviderInfo GetProviderInfo() const` - [ConfigProvider.cpp:~L64-67]
    - `bool GetValue(const FString& Key, FConfigValue& OutValue) const` - [ConfigProvider.cpp:~L69-82]
    - `FConfigOperationResult SetValue(const FString& Key, const FConfigValue& Value)` - [ConfigProvider.cpp:~L84-112]
  - Key members:
    - `FConfigProviderInfo ProviderInfo` - Provider information
    - `TMap<FString, FConfigValue> ConfigValues` - In-memory configuration values
    - `mutable TMap<FString, TSharedPtr<FConfigKeyInfo>> KeyInfoCache` - Key information cache

- `UConfigValidator` [ConfigValidator.cpp:~L6-416]
  - Purpose: Implementation of configuration validation
  - Inherits from: IConfigValidator
  - Key methods:
    - `bool Initialize()` - [ConfigValidator.cpp:~L27-39]
    - `void Shutdown()` - [ConfigValidator.cpp:~L41-58]
    - `FConfigValidationDetail ValidateValue(const FString& Key, const FMiningConfigValue& Value, bool bAutoCorrect)` - [ConfigValidator.cpp:~L64-120]
    - `FConfigValidationSummary ValidateAll(IConfigManager* ConfigManager, bool bAutoCorrect)` - [ConfigValidator.cpp:~L227-258]
    - `FConfigValidationDetail ValidateNumericValue(const FString& Key, const FMiningConfigValue& Value, const FConfigMetadata& Metadata, bool bAutoCorrect)` - [ConfigValidator.cpp:~L361-368]
  - Key members:
    - `TMap<FString, FConfigMetadata> ValidationRules` - Configuration validation rules
    - `TMap<FString, TFunction<FConfigValidationDetail(const FString&, const FMiningConfigValue&, bool)>> CustomValidationFunctions` - Custom validation functions
  - Singleton Implementation:
    - `static UConfigValidator* SingletonInstance` - Singleton instance pointer
    - `static IConfigValidator& Get()` - Get singleton instance [ConfigValidator.cpp:~L324-332]

- `UEngineConfigProvider` [EngineConfigProvider.cpp:~L6-45]
  - Purpose: Provider that loads and saves configuration from/to Unreal Engine config files
  - Inherits from: UConfigProvider
  - Key methods:
    - `FConfigOperationResult Load()` - [EngineConfigProvider.cpp:~L17-32]
  - Key members:
    - `FString ConfigFileName` - Config file name
    - `bool bAutoSave` - Auto-save flag

### Core Structures

- `FMiningConfigValue` [IConfigManager.h:~L68-241]
  - Purpose: Configuration value structure supporting multiple types
  - Key members:
    - `EConfigValueType Type` - Value type
    - `bool BoolValue` - Boolean value
    - `int64 IntValue` - Integer value
    - `double FloatValue` - Float value
    - `FString StringValue` - String value
    - `FVector VectorValue` - Vector value
    - `FRotator RotatorValue` - Rotator value
    - `FTransform TransformValue` - Transform value
    - `FLinearColor ColorValue` - Color value
    - `TSharedPtr<FJsonObject> JsonValue` - JSON object value
    - `EConfigSourcePriority SourcePriority` - Source priority
    - `bool bIsOverridden` - Whether value is overridden
    - `bool bIsReadOnly` - Whether value is read-only
    - `FDateTime LastUpdated` - Last update timestamp

- `FConfigMetadata` [IConfigManager.h:~L243-268]
  - Purpose: Configuration metadata structure with constraints and description
  - Key members:
    - `FMiningConfigValue DefaultValue` - Default value
    - `FMiningConfigValue MinValue` - Minimum value
    - `FMiningConfigValue MaxValue` - Maximum value
    - `FString Description` - Description
    - `FString Category` - UI category
    - `bool bIsDeprecated` - Whether option is deprecated
    - `FString ReplacementKey` - Replacement key if deprecated

- `FConfigValidationDetail` [IConfigValidator.h:~L35-95]
  - Purpose: Configuration validation result detail
  - Key members:
    - `bool bIsValid` - Whether validation passed
    - `EValidationSeverity Severity` - Validation severity
    - `FString Message` - Validation message
    - `FString Key` - Key that failed validation
    - `FMiningConfigValue SuggestedValue` - Suggested valid value
    - `bool bAutoCorrected` - Whether auto-correction was applied

- `FConfigValidationSummary` [IConfigValidator.h:~L97-149]
  - Purpose: Configuration validation summary
  - Key members:
    - `int32 ValidatedCount` - Count of validated keys
    - `int32 ValidCount` - Count of valid keys
    - `int32 InvalidCount` - Count of invalid keys
    - `int32 InfoCount` - Count of info messages
    - `int32 WarningCount` - Count of warnings
    - `int32 ErrorCount` - Count of errors
    - `int32 CriticalCount` - Count of critical errors
    - `int32 AutoCorrectedCount` - Count of auto-corrected values
    - `TArray<FConfigValidationDetail> Results` - Individual validation results

- `FConfigProviderInfo` [IConfigProvider.h:~L55-82]
  - Purpose: Configuration provider information
  - Key members:
    - `FGuid ProviderId` - Provider unique ID
    - `FString Name` - Provider name
    - `FString Description` - Provider description
    - `EConfigProviderType Type` - Provider type
    - `EConfigSourcePriority Priority` - Value priority
    - `bool bIsReadOnly` - Whether provider is read-only
    - `bool bSupportsHierarchy` - Whether provider supports hierarchical keys

- `FConfigOperationResult` [IConfigProvider.h:~L37-53]
  - Purpose: Configuration operation result
  - Key members:
    - `bool bSuccess` - Whether operation was successful
    - `FString ErrorMessage` - Error message if operation failed
    - `int32 AffectedKeyCount` - Number of affected keys

- `FConfigKeyInfo` [IConfigProvider.h:~L84-93]
  - Purpose: Configuration key information
  - Key members:
    - `FString Key` - Configuration key
    - `EConfigValueType Type` - Value type
    - `bool bIsReadOnly` - Whether key is read-only
    - `FDateTime LastModified` - Last modification timestamp

- `FConfigSectionSchema` [IConfigSchema.h:~L217-232]
  - Purpose: Configuration section schema definition
  - Key members:
    - `FString Name` - Section name
    - `FText Description` - Section description
    - `TArray<FConfigPropertySchema> Properties` - Properties in section
    - `bool bDeprecated` - Whether section is deprecated
    - `bool bRequired` - Whether section is required

- `FConfigPropertySchema` [IConfigSchema.h:~L153-205]
  - Purpose: Configuration property schema definition
  - Key members:
    - `FString Name` - Property name
    - `ESchemaValueType ValueType` - Property data type
    - `FString DefaultValue` - Default value as string
    - `FText Description` - Property description
    - `bool bRequired` - Whether property is required
    - `TArray<FConfigValueConstraint> Constraints` - Validation constraints
    - `TArray<FNestedPropertySchema> Properties` - Nested properties
    - `TArray<FString> EnumValues` - Enum allowed values

### Enumerations

- `EConfigValueType` [IConfigManager.h:~L8-32]
  - Purpose: Configuration value types
  - Values: `Boolean`, `Integer`, `Float`, `String`, `Vector`, `Rotator`, `Transform`, `Color`, `JsonObject`

- `EConfigSourcePriority` [IConfigManager.h:~L34-54]
  - Purpose: Configuration source priority levels
  - Values: `Default(0)`, `System(10)`, `Game(20)`, `User(30)`, `CommandLine(40)`, `Runtime(50)`, `Debug(100)`

- `EConfigPropagationMode` [IConfigManager.h:~L56-67]
  - Purpose: Configuration value change propagation mode
  - Values: `DirectOnly`, `UpTree`, `DownTree`, `FullTree`

- `EValidationSeverity` [IConfigValidator.h:~L11-23]
  - Purpose: Validation severity levels
  - Values: `Info`, `Warning`, `Error`, `Critical`

- `EConfigProviderType` [IConfigProvider.h:~L7-23]
  - Purpose: Configuration provider types
  - Values: `File`, `Memory`, `CommandLine`, `Database`, `Remote`, `Registry`, `Custom`

- `ESchemaValueType` [IConfigSchema.h:~L14-27]
  - Purpose: Schema value types
  - Values: `Bool`, `Int`, `Float`, `String`, `Vector`, `Rotator`, `Color`, `Enum`, `Array`, `Object`, `Custom`

## Dependencies

- System 1 Core Registry (via UObject)
  - Imports: `UObject/Interface.h`, `UObject/Object.h` [IConfigManager.h:~L5]
- JSON Serialization [ConfigManager.cpp:~L6-7]
  - Imports: `Dom/JsonObject.h`, `Serialization/JsonReader.h`, `Serialization/JsonSerializer.h`
- UE5 File IO [ConfigManager.cpp:~L5]
  - Imports: `Misc/FileHelper.h`
- UE5 Engine Config [EngineConfigProvider.cpp:~L4]
  - Imports: `Misc/ConfigCacheIni.h`

## Navigation Landmarks

FileSection: [IConfigManager.h]
- Core enums: ~L8-67
- Config value structure: ~L68-241
- Config metadata structure: ~L243-268
- IConfigManager interface: ~L300-435

FileSection: [IConfigProvider.h]
- Provider types enum: ~L7-23
- Operation result struct: ~L37-53
- Provider info struct: ~L55-82
- Key info struct: ~L84-93
- IConfigProvider interface: ~L125-215

FileSection: [IConfigValidator.h]
- Validation severity enum: ~L11-23
- Validation detail struct: ~L35-95
- Validation summary struct: ~L97-149
- IConfigValidator interface: ~L152-250

FileSection: [IConfigSchema.h]
- Schema value types enum: ~L14-27
- Value constraint struct: ~L29-46
- Schema definition structures: ~L48-205
- Config validation result: ~L207-215
- IConfigSchema interface: ~L270-365

FileSection: [ConfigManager.cpp]
- Initialization: ~L34-87
- File operations: ~L89-199
- Value access methods: ~L201-442
- Value mutation methods: ~L444-636
- Key/section operations: ~L638-741
- Change notifications: ~L743-825
- Provider management: ~L827-915
- Validation: ~L917-961
- Helper methods: ~L963-1153

FileSection: [ConfigValidator.cpp]
- Initialization: ~L27-63
- Value validation: ~L64-120
- Rule registration: ~L122-224
- Validation execution: ~L226-323
- Specific value type validation: ~L361-416

FileSection: [ConfigProvider.cpp]
- Initialization: ~L22-63
- Value operations: ~L69-112
- Key/section operations: ~L114-245
- Helper methods: ~L313-401

## Implementation Patterns

### Naming Patterns
- Methods:
  - Getters: `GetX()` (e.g. `GetValue()`, `GetBool()`)
  - Setters: `SetX()` (e.g. `SetValue()`, `SetBool()`)
  - Actions: `Initialize()`, `Shutdown()`, `Validate...`, `Register...`
  - Checkers: `IsX()` (e.g. `IsInitialized()`, `HasKey()`)
- Variables:
  - Member variables: Normal casing with descriptive names (e.g. `ValidationRules`, `ConfigValues`)
  - Boolean flags: `bIsX` or `bX` prefix (e.g. `bIsValid`, `bAutoCorrect`)
  - Parameters: Normal casing often with `In` prefix for input or `Out` prefix for output (e.g. `InKey`, `OutValue`)
- Types:
  - Classes/Interfaces: `IInterfaceName` prefix for interfaces, `FClassName` for structs, `UClassName` for UObject-derived classes
  - Enums: `EEnumName` prefix with `::Value` members

### Architectural Patterns
- **Singleton Pattern**: Used for central manager classes (UConfigManager, UConfigValidator)
- **Provider Pattern**: Multiple providers supply configuration values with different priorities
- **Observer Pattern**: Change callbacks for configuration value updates
- **Strategy Pattern**: Validation rules and custom validation functions
- **Builder Pattern**: Schema-based configuration creation
- **Facade Pattern**: ConfigManager provides simplified interface to complex subsystem

### Thread Safety
- Critical sections used for thread-safe operations
- FScopeLock for synchronized access to shared resources
- Thread-safe singleton access

### Validation System
- Rule-based validation with min/max bounds
- Custom validation functions for complex constraints
- Enum value validation for string properties
- Auto-correction capability for invalid values
- Severity levels for differentiated handling of issues

### Configuration Value Handling
- Type-safe accessors for different value types
- Priority-based value resolution
- Hierarchical configuration structure
- Value caching for performance
- Change propagation with different scopes

## Potential Naming Conflicts

- `Initialize()` appears in multiple interfaces (IConfigManager, IConfigProvider, IConfigValidator, IConfigSchema)
- `Shutdown()` appears in multiple interfaces (IConfigManager, IConfigProvider, IConfigValidator, IConfigSchema)
- `IsInitialized()` appears in multiple interfaces
- `GetValue()` appears in both IConfigManager and IConfigProvider with slightly different signatures
- `ValidateAll()` in both IConfigValidator and UConfigManager with different parameters

## Architectural Boundaries

- Configuration system spans boundaries with:
  - Core Registry (System 1) for type registration and object creation
  - Event System (System 4) for change notification (implied but not explicitly shown)
  - All other systems as "users" of configuration

## Known Issues & Constraints

- ConfigValue vs MiningConfigValue dual structure creates conversion overhead
- Hierarchical validation could be expensive for deeply nested structures
- File operations are synchronous and could block on large configurations
- Cache invalidation across multiple providers requires careful management
- Auto-correction must maintain consistency across related parameters

## Implementation Details

### Value Caching and Priority
The system maintains a cache of configuration values from all providers, with higher priority sources overriding lower priority ones. This allows for a layered configuration approach where:
- Default values are lowest priority
- System configuration overrides defaults
- User configuration overrides system configuration
- Runtime changes override user configuration
- Debug settings can override everything

### Validation Framework
Validation can be performed at different levels:
- Individual values during setting
- Sections of configuration
- Entire configuration

Validation results include:
- Validity status
- Severity level (Info, Warning, Error, Critical)
- Error message
- Suggested correction
- Auto-correction status

### Schema System
The schema system provides:
- Type information for values
- Default values
- Constraints for validation
- Property descriptions for UI generation
- Section organization for hierarchical display
- Versioning for configuration migration

### Change Notification
Changes to configuration values can propagate notifications in different ways:
- DirectOnly: Only notify subscribers to the specific key
- UpTree: Notify key subscribers and parent sections
- DownTree: Notify key subscribers and child keys
- FullTree: Notify all related subscribers (both up and down the hierarchy)

### Provider Management
The configuration manager can work with multiple providers simultaneously:
- Memory-based providers for runtime values
- File-based providers for persistent storage
- Engine-based providers for UE5 integration
- Custom providers for special storage needs

Providers are sorted by priority, with higher priority providers overriding lower ones for the same keys.