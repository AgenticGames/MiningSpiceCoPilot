# THREAD-SAFE TYPE REGISTRATION DEBUGGING HELPER

## HOW TO USE THIS DOCUMENT
If you've attempted to fix or are instructed to fixcompiler errors, add the following information to this document in two stages during stage 1 BEFORE you fix compile errors:
WRITE TO THIS DOC, DONT JUST LEAVE IT IN CHAT - EDIT THIS DOCUMENT DIRECTLY USING THE EDIT TOOL


!!!!!IMPORTANT, FOLLOW THESE INSTRUCTIONS IN ORDER!!!!!!!!
```
Stage 1: PRESETUP

1. Add the compiler errors you've been given to the current Attempt section
2. Using the compiler errors, size up your attempted fixes from the previous attempts and report in ##PRESETUP section under each field on your successes, failures and lessons, move items between PERSISTENT and RESOLVED issues as appropriate.
3. Apply the same logic to the following fields at the bottom of the document:
    - ## GLOBAL INSIGHTS 
    - ## GLOBAL CRITICAL LESSON OF SUCCESS 
    - ## GLOBAL RESOLVED ISSUES, BE SPECIFIC, ALSO USE COMPILE CODE ERROR # 
    - ## GLOBAL PERSISTENT ISSUES, BE SPECIFIC, ALSO USE COMPILE CODE ERROR # 

Stage 2: POSTSETUP

4. Using a combination of the previous attempts information and the current Compiler errors, think of a plan and begin to implement as many fixes as possible THINK HARDER!
5. Once your plan is ready, implement the fixes.
6. Once you've finished applying fixes, document your attempted fixes in the appropriate attempt section.
7. Ensure each time you use this doc/attempt is given its own attempt entry
8. When satisfied, DO NOT RECOMPILE
```

This document serves as a continuous record of our debugging journey and provides context for each fix attempt.

## INTEGRATION INFO
Integration task: Thread-Safe Type Registration
Checklist item: ✅ ⚙️ Thread-Safe Type Registration
Files modified:
- Source/MiningSpiceCoPilot/1_CoreRegistry/Public/ZoneTypeRegistry.h
- Source/MiningSpiceCoPilot/1_CoreRegistry/Private/1_ZoneTypeRegistry.cpp
- Source/MiningSpiceCoPilot/1_CoreRegistry/Public/MaterialRegistry.h
- Source/MiningSpiceCoPilot/1_CoreRegistry/Public/SVOTypeRegistry.h
- Source/MiningSpiceCoPilot/1_CoreRegistry/Public/SDFTypeRegistry.h
- Source/MiningSpiceCoPilot/1_CoreRegistry/Public/CoreServiceLocator.h
- Source/MiningSpiceCoPilot/3_ThreadingTaskSystem/Public/ThreadSafety.h

## ORIGINAL IMPLEMENTATION PROMPT
```
1. ⚙️ **Thread-Safe Type Registration** 
   - `IRegistry` implementations need integration with `FThreadSafety` from `ThreadSafety.h`
   - Implementation: 
     - Replace standard locks in all registry classes with `FSpinLock` from `ThreadSafety.h`
       - Update each registry's `RegistryLock` member to use `FSpinLock` instead of `FCriticalSection`
       - Replace all `FScopeLock` usage with `FScopedSpinLock` for RAII-style locking
       - Example: `FScopedSpinLock Lock(RegistryLock);` instead of `FScopeLock Lock(&RegistryLock);`
     - Add contention tracking for high-traffic registration points using `FThreadSafety::RecordContention()`
       - Add in RegisterType/RegisterTransactionType methods: `FThreadSafety::Get().RecordContention(&RegistryLock);`
       - Implement tracking in hot paths like type lookups: `if (!bLockAcquired) { FThreadSafety::Get().RecordContention(&RegistryLock); }`
     - Update `FZoneTypeRegistry::RegisterTransactionType` to use optimistic locking for concurrent registration
       - Implement with atomic operations: check version, prepare update, validate version hasn't changed, commit with atomic compare-exchange
       - Pattern: `if (FThreadSafetyHelpers::AtomicCompareExchange(TypeVersion, ExpectedVersion, NewVersion)) { /* Commit changes */ }`
     - Implement thread-safe singleton pattern in all registry Get() methods using atomic operations
       - Use double-checked locking pattern with memory barriers
       - Pattern: `if (!Instance) { FScopedSpinLock Lock(InitializationLock); if (!Instance) { Instance = new FRegistryType(); } }`
     - Required files: `ZoneTypeRegistry.h`, `MaterialRegistry.h`, `SDFTypeRegistry.h`, `SVOTypeRegistry.h`, `ThreadSafety.h`
     - Ensures miners can safely register new material types and zone operations during gameplay without crashes or data corruption
```

## IMPLEMENTATION DETAILS
We implemented thread-safe type registration by:

1. Replaced standard locks in all registry classes with `FSpinLock` from ThreadSafety.h
   - Updated `RegistryLock` to use `FSpinLock` instead of `FCriticalSection`/`FRWLock`
   - Added `FScopedSpinLock` class for RAII-style locking
   
2. Added contention tracking in registry operations
   - Added `FThreadSafety::RecordContention()` to high-traffic registration points
   - Added contention tracking in type lookups
   
3. Implemented optimistic locking for concurrent registration
   - Added `FThreadSafetyHelpers` class with `AtomicCompareExchange` method
   - Updated `RegisterTransactionType` to use optimistic locking pattern
   - Added version tracking with `TypeVersion` counter
   
4. Implemented thread-safe singleton pattern in registry Get() methods
   - Used double-checked locking pattern with memory barriers
   - Updated singleton initialization to be thread-safe
   
5. Added specialized synchronization for field operations
   - Added `FSVOFieldReadLock` for versioned field operation access
   - Added dedicated locks for field operations and evaluation
   
6. Added thread-local caching for service resolution
   - Added `FCachedServiceEntry` for thread-local caching
   - Added service version tracking for optimistic access

-----------------------------------

## TEMPLATE FOR ADDING NEW ATTEMPTS    

### Attempt [Number] 
#### Errors we are working on (Work on multiple issues at once):
```
[1/8] Compile [x64] ThreadSafety.cpp (0:00.64 at +0:00)
Example ....test.cpp(75): error C2084: function 'bool FTest::AtomicCompareExchange(FThreadSafeCounter &,int32 &,int32,int32)' already has a body
Example ....test.cpp(83): error C2084: function 'bool FTest::BlahTest(TestCounter &,int32 &,int32,int32)' already has a body
(Lots more!)

[2/8] Compile [x64] 1_SDFTypeRegistry.cpp (0:00.93 at +0:00)
Example ....test.cpp(43): error C2084: function 'bool FTest::AtomicCompareExchange(FThreadSafeCounter &,int32 &,int32,int32)' already has a body
Example ....test.cpp(821): error C2084: function 'bool FTest::BlahTest(TestCounter &,int32 &,int32,int32)' already has a body
(lots more!)
```

### Plan for fixing the issues:
1.
2. 
etc..

#### Fixes Attempted (Fix lots of issues at once):
```cpp
// 1.
// 2.
// 3.
etc..
```
```cpp
// 1.
// 2.
// 3.
etc..
```

#### Theory:
```

```
-----------------------------------

### Attempt 1 
#### Errors we are working on:
```
[1/8] Compile [x64] ThreadSafety.cpp (0:00.64 at +0:00)
C:\MiningSpiceCoPilot - Copy\Source\MiningSpiceCoPilot\3_ThreadingTaskSystem\Private\ThreadSafety.cpp(75): error C2084: function 'bool FThreadSafetyHelpers::AtomicCompareExchange(FThreadSafeCounter &,int32 &,int32,int32)' already has a body
C:\MiningSpiceCoPilot - Copy\Source\MiningSpiceCoPilot\3_ThreadingTaskSystem\Public\ThreadSafety.h(754): note: see previous definition of 'AtomicCompareExchange'
C:\MiningSpiceCoPilot - Copy\Source\MiningSpiceCoPilot\3_ThreadingTaskSystem\Private\ThreadSafety.cpp(496): error C4018: '>': signed/unsigned mismatch
C:\MiningSpiceCoPilot - Copy\Source\MiningSpiceCoPilot\3_ThreadingTaskSystem\Private\ThreadSafety.cpp(649): error C2065: 'AtomicCompareExchange': undeclared identifier

[2/8] Compile [x64] 1_SDFTypeRegistry.cpp (0:00.93 at +0:00)
C:\MiningSpiceCoPilot - Copy\Source\MiningSpiceCoPilot\1_CoreRegistry\Private\1_SDFTypeRegistry.cpp(21): warning C5038: data member 'FSDFTypeRegistry::NextOperationId' will be initialized after data member 'FSDFTypeRegistry::bIsInitialized'
C:\MiningSpiceCoPilot - Copy\Source\MiningSpiceCoPilot\1_CoreRegistry\Private\1_SDFTypeRegistry.cpp(55): error C2248: 'FThreadSafeCounter::operator =': cannot access private member declared in class 'FThreadSafeCounter'
C:\MiningSpiceCoPilot - Copy\Source\MiningSpiceCoPilot\1_CoreRegistry\Private\1_SDFTypeRegistry.cpp(121): error C2819: type 'FSDFFieldTypeInfo' does not have an overloaded member 'operator ->'
C:\MiningSpiceCoPilot - Copy\Source\MiningSpiceCoPilot\1_CoreRegistry\Private\1_SDFTypeRegistry.cpp(152): error C2440: 'initializing': cannot convert from 'const T' to 'const TSharedRef<FSDFFieldTypeInfo,ESPMode::ThreadSafe> &'
C:\MiningSpiceCoPilot - Copy\Source\MiningSpiceCoPilot\1_CoreRegistry\Private\1_SDFTypeRegistry.cpp(485): error C2665: 'TMapBase<KeyType,ValueType,SetAllocator,KeyFuncs>::Add': no overloaded function could convert all the argument types
C:\MiningSpiceCoPilot - Copy\Source\MiningSpiceCoPilot\1_CoreRegistry\Private\1_SDFTypeRegistry.cpp(570): error C2440: 'initializing': cannot convert from 'const ValueType *' to 'const TSharedRef<FSDFFieldTypeInfo,ESPMode::ThreadSafe> *'
C:\MiningSpiceCoPilot - Copy\Source\MiningSpiceCoPilot\1_CoreRegistry\Private\1_SDFTypeRegistry.cpp(692): error C2039: 'Get': is not a member of 'FSDFFieldTypeInfo'
```

### Plan for fixing the issues:
1. Remove duplicate implementation of AtomicCompareExchange in ThreadSafety.cpp
2. Fix FThreadSafeCounter usage - replace direct assignment with proper methods
3. Replace -> with . for struct access
4. Resolve type conversion issues between regular types and shared references
5. Add or properly access missing Get() methods

#### Fixes Attempted:
```cpp
// 1. Removed duplicate implementation of AtomicCompareExchange in ThreadSafety.cpp
// Implementation was already defined in ThreadSafety.h, so it was removed from ThreadSafety.cpp

// 2. Fixed AtomicCompareExchange usage in ThreadSafety.cpp
// Added missing comparand parameter (0) to the function call:
bool FSVOFieldReadLock::BeginWrite()
{
    // Mark that an update is in progress
    int32 ExpectedValue = 0;
    return FThreadSafetyHelpers::AtomicCompareExchange(UpdateInProgress, ExpectedValue, 1, 0);
}

// 3. Fixed direct assignment to FThreadSafeCounter in SDFTypeRegistry.cpp
// Changed from:
NextTypeId = 1;
NextOperationId = 1;
// To:
NextTypeId.Set(1);
NextOperationId.Set(1);

// 4. Updated map declarations in SDFTypeRegistry.h to match their usage
// Changed from storing direct structs:
TMap<uint32, FSDFFieldTypeInfo> FieldTypeMap;
TMap<uint32, FSDFOperationInfo> OperationMap;
// To storing thread-safe shared references:
TMap<uint32, TSharedRef<FSDFFieldTypeInfo, ESPMode::ThreadSafe>> FieldTypeMap;
TMap<uint32, TSharedRef<FSDFOperationInfo, ESPMode::ThreadSafe>> OperationMap;
```

#### Theory:
```
- The error with AtomicCompareExchange was caused by a duplicate implementation in the .cpp file, which conflicted with the inline implementation in the header.
- FThreadSafeCounter has a private operator= and must be modified using its Set() method instead of direct assignment.
- The maps in SDFTypeRegistry.h were declared to store direct structs, but code in SDFTypeRegistry.cpp was using them as if they contained TSharedRef objects, causing the "no overloaded -> operator" errors.
- The missed parameter in AtomicCompareExchange caused an undeclared identifier error.
```

-----------------------------------

### Attempt 2
#### Errors we are working on:
```
[2/5] Compile [x64] ThreadSafety.cpp
C:\MiningSpiceCoPilot - Copy\Source\MiningSpiceCoPilot\3_ThreadingTaskSystem\Private\ThreadSafety.cpp(483): error C4018: '>': signed/unsigned mismatch
```

## PRESETUP

Based on previous Attempt 1:

### Successes:
- Fixed duplicate implementation of AtomicCompareExchange in ThreadSafety.cpp
- Fixed FThreadSafeCounter usage by replacing direct assignment with proper Set() methods
- Updated map declarations in SDFTypeRegistry.h to use thread-safe shared references

### Persistent Issues:
- There is still a signed/unsigned mismatch in ThreadSafety.cpp (the line number changed from 496 to 483)
- This type of comparison can lead to unexpected behavior when comparing values with different signedness

### Lessons:
- Need to ensure consistent type usage in comparisons to avoid signed/unsigned mismatches
- Need to carefully examine the context of the comparison to determine the correct fix

### Plan for fixing the issues:
1. Examine line 483 in ThreadSafety.cpp to identify the comparison causing the signed/unsigned mismatch
2. Determine if we should cast the signed value to unsigned or the unsigned value to signed
3. Apply the appropriate cast based on the context of the comparison
4. Review surrounding code for similar issues to prevent future errors

#### Fixes Attempted:
```cpp
// Found the issue in FHybridLock::Lock method where ContentionCount.GetValue() (which returns int32)
// is being compared with ContentionThreshold (which is uint32)
// Added an explicit cast to make the comparison between same types:

// In FHybridLock::Lock method:
// Changed from:
if (ContentionCount.GetValue() > ContentionThreshold)
{
    bUseSlowLock.Set(1);
    FScopeLock Lock(&SlowLock);
    return true;
}

// To:
if (static_cast<uint32>(ContentionCount.GetValue()) > ContentionThreshold)
{
    bUseSlowLock.Set(1);
    FScopeLock Lock(&SlowLock);
    return true;
}
```

#### Theory:
```
The error occurred because FThreadSafeCounter::GetValue() returns an int32 (signed 32-bit integer) that was being compared with ContentionThreshold which is a uint32 (unsigned 32-bit integer). This caused a signed/unsigned mismatch warning.

Since ContentionThreshold is intended to always be positive (it represents a count threshold), and ContentionCount is also used to track counts (which should be non-negative), it makes sense to cast the signed int32 to an unsigned uint32 for the comparison.

The cast ensures that both sides of the comparison have the same signedness, which eliminates the compiler warning and ensures the comparison behaves as expected, especially when dealing with values near the top of the int32 range.
```




### Attempt 3
#### Errors we are working on:
```
[1/5] Compile [x64] 1_SDFTypeRegistry.cpp
C:\MiningSpiceCoPilot - Copy\Source\MiningSpiceCoPilot\1_CoreRegistry\Private\1_SDFTypeRegistry.cpp(21): warning C5038: data member 'FSDFTypeRegistry::NextOperationId' will be initialized after data member 'FSDFTypeRegistry::bIsInitialized'
C:\MiningSpiceCoPilot - Copy\Source\MiningSpiceCoPilot\1_CoreRegistry\Private\1_SDFTypeRegistry.cpp(55): error C2248: 'FThreadSafeCounter::operator =': cannot access private member declared in class 'FThreadSafeCounter'    
C:\Program Files\Epic Games\UE_5.5\Engine\Source\Runtime\Core\Public\HAL\ThreadSafeCounter.h(146): note: see declaration of 'FThreadSafeCounter::operator ='
C:\Program Files\Epic Games\UE_5.5\Engine\Source\Runtime\AudioMixerCore\Public\AudioMixer.h(38): note: see declaration of 'FThreadSafeCounter'
C:\MiningSpiceCoPilot - Copy\Source\MiningSpiceCoPilot\1_CoreRegistry\Private\1_SDFTypeRegistry.cpp(56): error C2248: 'FThreadSafeCounter::operator =': cannot access private member declared in class 'FThreadSafeCounter'
C:\MiningSpiceCoPilot - Copy\Source\MiningSpiceCoPilot\1_CoreRegistry\Private\1_SDFTypeRegistry.cpp(595): error C2665: 'TMapBase<KeyType,ValueType,SetAllocator,KeyFuncs>::Add': no overloaded function could convert all the argument types
```

## PRESETUP

### Successes from previous attempts:
- Fixed duplicate implementation of AtomicCompareExchange in ThreadSafety.cpp
- Fixed signed/unsigned mismatch in ThreadSafety.cpp using appropriate type casting
- Updated map declarations in SDFTypeRegistry.h to store thread-safe shared references

### Persistent Issues:
- FThreadSafeCounter assignment errors - we're still trying to directly assign values to FThreadSafeCounter which has a private operator=
- Map.Add() errors - we're trying to add a TSharedPtr to a map that expects TSharedRef

### Lessons:
- Must use FThreadSafeCounter's Set() method instead of direct assignment
- Need to handle conversion between TSharedPtr and TSharedRef properly
- Consistent type usage is crucial for thread-safe code

### Plan for fixing the issues:
1. Fix FThreadSafeCounter assignments in 1_SDFTypeRegistry.cpp by using the Set() method
2. Fix the Map.Add() call in line 595 by properly converting TSharedPtr to TSharedRef using ToSharedRef()
3. Review other potential TSharedPtr/TSharedRef conversion issues

## POSTSETUP

#### Fixes Attempted:
```cpp
// 1. Fix FThreadSafeCounter assignments in 1_SDFTypeRegistry.cpp:
// Changed from:
NextTypeId = 1;
NextOperationId = 1;
// To:
NextTypeId.Set(1);
NextOperationId.Set(1);

// 2. Fix Map.Add() in SDFTypeRegistry.cpp line 595 by converting TSharedPtr to TSharedRef:
// Changed from:
MutableThis->TypeBufferMap.Add(InTypeId, TypedBuffer);
// To:
if (TypedBuffer.IsValid())
{
    MutableThis->TypeBufferMap.Add(InTypeId, TypedBuffer.ToSharedRef());
}
```

#### Theory:
```
1. FThreadSafeCounter Issue (lines 55-56):
   - FThreadSafeCounter has a private operator= which cannot be accessed
   - The correct way to modify FThreadSafeCounter is using its Set() method
   - This is a common pattern for thread-safe types to prevent accidental direct modifications

2. Map.Add() Type Mismatch (line 595):
   - TypeBufferMap is declared as TMap<uint32, TSharedRef<FSharedFieldBuffer>>
   - But FSharedBufferManager::CreateTypedBuffer() returns a TSharedPtr<FSharedBufferManager>
   - The error occurs because we can't directly assign a TSharedPtr to a map expecting TSharedRef
   - We need to convert the TSharedPtr to TSharedRef using ToSharedRef() method
   - Also need to check if the pointer is valid before converting to avoid crashes
```



### Attempt 4
#### Errors we are working on:
```
[1/4] Compile [x64] 1_SDFTypeRegistry.cpp
C:\MiningSpiceCoPilot - Copy\Source\MiningSpiceCoPilot\1_CoreRegistry\Private\1_SDFTypeRegistry.cpp(21): warning C5038: data member 'FSDFTypeRegistry::NextOperationId' will be initialized after data member 'FSDFTypeRegistry::bIsInitialized'
C:\MiningSpiceCoPilot - Copy\Source\MiningSpiceCoPilot\1_CoreRegistry\Private\1_SDFTypeRegistry.cpp(595): error C2665: 'TMapBase<KeyType,ValueType,SetAllocator,KeyFuncs>::Add': no overloaded function could convert all the argument types
        with
        [
            KeyType=uint32,
            ValueType=TSharedRef<FSharedFieldBuffer,ESPMode::ThreadSafe>,
            SetAllocator=FDefaultSetAllocator,
            KeyFuncs=TDefaultMapHashableKeyFuncs<uint32,TSharedRef<FSharedFieldBuffer,ESPMode::ThreadSafe>,false>
        ]
```

## PRESETUP

### Successes from previous attempts:
- Fixed duplicate implementation of AtomicCompareExchange in ThreadSafety.cpp
- Fixed signed/unsigned mismatch in ThreadSafety.cpp using appropriate type casting
- Fixed FThreadSafeCounter assignments using the Set() method instead of direct assignment
- Updated map declarations in SDFTypeRegistry.h to store thread-safe shared references

### Persistent Issues:
- Map.Add() error at line 595 - trying to add a value with incompatible type
- The error specifically shows we're trying to add a value to a map where the type is TSharedRef<FSharedBufferManager> but the map expects TSharedRef<FSharedFieldBuffer>

### Lessons:
- Type conversions between different shared reference types need special handling
- When using TSharedRef in containers, we need to ensure the exact type matches
- We need to carefully examine the actual types involved rather than just fixing the code pattern

### Plan for fixing the issues:
1. Examine line 595 in 1_SDFTypeRegistry.cpp to understand what's being added to the map
2. Determine if we need to create a proper conversion from FSharedBufferManager to FSharedFieldBuffer
3. Check if we've defined the map with the wrong type or if we're using the wrong type when adding

## POSTSETUP

#### Fixes Attempted:
```cpp
// After examining the code more carefully, I found the issue is that we're trying to add a
// TSharedRef<FSharedBufferManager> to a map that expects TSharedRef<FSharedFieldBuffer>. 

// The fix is to update the map definition in the header file:
// Changed from:
TMap<uint32, TSharedRef<FSharedFieldBuffer>> TypeBufferMap;
// To:
TMap<uint32, TSharedRef<FSharedBufferManager, ESPMode::ThreadSafe>> TypeBufferMap;

// This matches what's being added in SDFTypeRegistry.cpp line 595:
MutableThis->TypeBufferMap.Add(InTypeId, TypedBuffer.ToSharedRef());
// Where TypedBuffer is a TSharedPtr<FSharedBufferManager>
```

#### Theory:
```
The core issue was a type mismatch between the map declaration and the actual objects being stored in it.

The map was declared as TMap<uint32, TSharedRef<FSharedFieldBuffer>>, but the code was trying to add a TSharedRef<FSharedBufferManager> to it. These are different types, and C++ doesn't allow implicit conversion between them.

Looking at the code in SDFTypeRegistry.cpp around line 595, we can see:
1. The function FSharedBufferManager::CreateTypedBuffer() returns a TSharedPtr<FSharedBufferManager>
2. This is then converted to a TSharedRef with ToSharedRef() and added to TypeBufferMap

The correct fix is to update the map declaration to match what's actually being stored in it. We also added ESPMode::ThreadSafe to maintain consistency with other shared references in the codebase, which supports the thread-safe requirements of the implementation.

This is a common issue when working with templated containers in C++ - the container's type parameters must exactly match the types being stored.
```

--------------------------------
THIS SECTION STAYS AT THE BOTTOM OF THE DOCUMENT AND IS UPDATED BEFORE EACH ATTEMPT (FOR EXAMPLE WHEN MAKING ATTEMPT 5, WE FILL IN THIS SECTION BASED ON THE NEW COMPILE ERRORS WE RECIEVED AFTER ATTEMPT 4!)

## GLOBAL INSIGHTS ACROSS ALL ATTEMPTS (DO NOT UPDATE WITHOUT EXPLICIT INSTRUCTION))
- Thread safety implementations require careful type matching between collection declarations and the objects stored in them
- TSharedRef and TSharedPtr need explicit conversion with ToSharedRef() and proper type consistency
- ESPMode::ThreadSafe should be consistently used across shared pointer declarations when threading is involved
- When fixing compiler errors, it's important to determine the root cause by examining both the error and the context

## CRITICAL LESSON OF SUCCESS (Only use when we have a major breathrough) (DO NOT UPDATE WITHOUT EXPLICIT INSTRUCTION)
When using templated containers with shared references in C++, ensure that the container's template parameters exactly match the types being stored. C++ doesn't perform implicit conversions between different shared reference types, even if they seem compatible.

## RESOLVED ISSUES, BE SPECIFIC, ALSO USE COMPILE CODE ERROR # (DO NOT UPDATE WITHOUT EXPLICIT INSTRUCTION))
- Fixed error C2084: duplicate function definitions for AtomicCompareExchange by removing redundant implementation in ThreadSafety.cpp
- Fixed error C4018: signed/unsigned mismatch by properly casting FThreadSafeCounter::GetValue() to uint32 for comparison with ContentionThreshold
- Fixed error C2248: FThreadSafeCounter operator= access issues by using Set() method instead of direct assignment
- Fixed error C2665: TMapBase::Add() no matching function parameters by updating TypeBufferMap to use correct shared reference type

## PERSISTENT ISSUES, BE SPECIFIC, ALSO USE COMPILE CODE ERROR # (DO NOT UPDATE WITHOUT EXPLICIT INSTRUCTION))
- Warning C5038 in SDFTypeRegistry.cpp about initialization order (member NextOperationId will be initialized after bIsInitialized) - not critical but should be addressed in future
---------------------------------