# SYSTEM 7: Factory System for Component Creation

## Overview
The Factory System provides a robust framework for creating, managing, and reusing components in the mining system. It implements object pooling, archetype-based instantiation, and factory pattern to efficiently create various specialized components while maintaining performance metrics.

## Class Hierarchy

### Interfaces

- `IFactory` [7_FactorySystem/Public/Interfaces/IFactory.h]
  - Purpose: Core interface for component factories defining the factory lifecycle and component creation
  - Key methods:
    - `virtual bool Initialize() = 0`
    - `virtual void Shutdown() = 0`
    - `virtual bool IsInitialized() const = 0`
    - `virtual FName GetFactoryName() const = 0`
    - `virtual bool SupportsType(UClass* ComponentType) const = 0`
    - `virtual UObject* CreateComponent(UClass* ComponentType, const TMap<FName, FString>& Parameters) = 0`
    - `virtual TArray<UClass*> GetSupportedTypes() const = 0`
    - `virtual bool RegisterArchetype(UClass* ComponentType, UObject* Archetype) = 0`

- `IFactoryRegistry` [7_FactorySystem/Public/Interfaces/IFactoryRegistry.h]
  - Purpose: Registry that manages multiple factories and routes creation requests
  - Key methods:
    - `virtual bool RegisterFactory(TScriptInterface<IFactory> Factory) = 0`
    - `virtual bool UnregisterFactory(TScriptInterface<IFactory> Factory) = 0`
    - `virtual bool UnregisterFactory(const FName& FactoryName) = 0`
    - `virtual TScriptInterface<IFactory> GetFactory(const FName& FactoryName) const = 0`
    - `virtual TScriptInterface<IFactory> GetFactoryForType(UClass* ComponentType) const = 0`
    - `virtual TArray<TScriptInterface<IFactory>> GetAllFactories() const = 0`
    - `virtual UObject* CreateComponent(UClass* ComponentType, const TMap<FName, FString>& Parameters) = 0`

- `IFactoryMetrics` [7_FactorySystem/Public/Interfaces/IFactoryMetrics.h]
  - Purpose: Tracks and reports performance metrics for factory operations
  - Key methods:
    - `virtual void TrackOperation(const FName& FactoryName, UClass* ComponentType, EFactoryOperationType OperationType, float DurationMs) = 0`
    - `virtual int32 BeginOperation(const FName& FactoryName, UClass* ComponentType, EFactoryOperationType OperationType) = 0`
    - `virtual void EndOperation(int32 OperationHandle, bool bSuccess, bool bCacheMiss) = 0`
    - `virtual void GetMetrics(TMap<FName, FFactoryMetrics>& OutMetrics) const = 0`
    - `virtual void ResetMetrics() = 0`
    - `static IFactoryMetrics& Get()`

- `IComponentPoolManager` [7_FactorySystem/Public/Interfaces/IComponentPoolManager.h]
  - Purpose: Manages object pools for efficient component reuse
  - Key methods:
    - `virtual bool CreatePool(const FComponentPoolConfig& PoolConfig) = 0`
    - `virtual bool DestroyPool(const FName& PoolName) = 0`
    - `virtual UObject* AllocateComponent(const FName& PoolName) = 0`
    - `virtual UObject* AllocateComponentByType(UClass* ComponentType) = 0`
    - `virtual bool ReleaseComponent(UObject* Component) = 0`
    - `virtual bool HasPool(const FName& PoolName) const = 0`
    - `virtual bool HasPoolForType(UClass* ComponentType) const = 0`
    - `virtual bool GetPoolStats(const FName& PoolName, FComponentPoolStats& OutStats) const = 0`
    - `virtual int32 ShrinkPool(const FName& PoolName, int32 TargetSize, float MaxTimeMs) = 0`
    - `static IComponentPoolManager& Get()`

- `IComponentBuilder` [7_FactorySystem/Public/Interfaces/IComponentBuilder.h]
  - Purpose: Fluent interface for configuring and building components
  - Key methods:
    - `virtual IComponentBuilder* WithParameter(const FName& Name, const FString& Value) = 0`
    - `virtual IComponentBuilder* WithParameters(const TMap<FName, FString>& Params) = 0`
    - `virtual IComponentBuilder* WithTransform(const FTransform& Transform) = 0`
    - `virtual IComponentBuilder* WithLocation(const FVector& Location) = 0`
    - `virtual IComponentBuilder* WithRotation(const FRotator& Rotation) = 0`
    - `virtual IComponentBuilder* WithScale(const FVector& Scale) = 0`
    - `virtual UObject* Build() = 0`
    - `virtual UObject* BuildOrGet() = 0`
    - `virtual void Release(UObject* Component) = 0`

### Concrete Implementations

- `USVONodeFactory` [7_FactorySystem/Public/Factory/SVONodeFactory.h, 7_FactorySystem/Private/Factory/SVONodeFactory.cpp]
  - Purpose: Factory for creating Sparse Voxel Octree (SVO) nodes with optimized pooling
  - Implements: IFactory
  - Key methods:
    - `bool Initialize()` [SVONodeFactory.cpp:~L29-48]
    - `void Shutdown()` [SVONodeFactory.cpp:~L50-69]
    - `UObject* CreateComponent(UClass* ComponentType, const TMap<FName, FString>& Parameters)` [SVONodeFactory.cpp:~L85-150]
    - `bool RegisterArchetype(UClass* ComponentType, UObject* Archetype)` [SVONodeFactory.cpp:~L165-183]
    - `UObject* CreateSVONode(ENodeType NodeType, const FVector& Location, uint8 LOD, uint32 MaterialTypeId)` [SVONodeFactory.cpp:~L317-382]
    - `TArray<UObject*> CreateSVONodeBatch(ENodeType NodeType, int32 Count, uint8 LOD)` [SVONodeFactory.cpp:~L384-456]
    - `static USVONodeFactory* Get()` [SVONodeFactory.cpp:~L458-468]
  - Key members:
    - `bool bIsInitialized` [SVONodeFactory.h]
    - `FName FactoryName` [SVONodeFactory.h]
    - `TSet<UClass*> SupportedTypes` [SVONodeFactory.h]
    - `TMap<UClass*, UObject*> Archetypes` [SVONodeFactory.h]
    - `TMap<FName, int32> NodePoolSizes` [SVONodeFactory.h]
    - `TMap<FName, FNodeMetrics> NodeMetrics` [SVONodeFactory.h]
    - `TScriptInterface<IComponentPoolManager> PoolManager` [SVONodeFactory.h]

- `UMiningSystemFactory` [7_FactorySystem/Public/Factory/MiningSystemFactory.h, 7_FactorySystem/Private/Factory/MiningSystemFactory.cpp]
  - Purpose: Central factory for creating various mining system components
  - Implements: IFactory
  - Key methods:
    - `bool Initialize()` [MiningSystemFactory.cpp:~L29-47]
    - `void Shutdown()` [MiningSystemFactory.cpp:~L49-68]
    - `UObject* CreateComponent(UClass* ComponentType, const TMap<FName, FString>& Parameters)` [MiningSystemFactory.cpp:~L84-132]
    - `bool RegisterComponentType(UClass* ComponentType)` [MiningSystemFactory.cpp:~L242-258]
    - `int32 RegisterComponentTypes(const TArray<UClass*>& ComponentTypes)` [MiningSystemFactory.cpp:~L260-270]
    - `TSharedPtr<IComponentBuilder> CreateBuilder(UClass* ComponentType, bool UsePooling)` [MiningSystemFactory.cpp:~L290-306]
    - `static UMiningSystemFactory* Get()` [MiningSystemFactory.cpp:~L352-363]
  - Key members:
    - `bool bIsInitialized` [MiningSystemFactory.h]
    - `FName FactoryName` [MiningSystemFactory.h]
    - `TSet<UClass*> SupportedTypes` [MiningSystemFactory.h]
    - `TMap<UClass*, UObject*> Archetypes` [MiningSystemFactory.h]
    - `TScriptInterface<IComponentPoolManager> PoolManager` [MiningSystemFactory.h]

- `UMaterialSDFFactory` [7_FactorySystem/Public/Factory/MaterialSDFFactory.h, 7_FactorySystem/Private/Factory/MaterialSDFFactory.cpp]
  - Purpose: Factory for creating material-based signed distance fields
  - Implements: IFactory
  - Key methods:
    - `bool Initialize()` [MaterialSDFFactory.cpp:~L29-47]
    - `void Shutdown()` [MaterialSDFFactory.cpp:~L49-70]
    - `UObject* CreateComponent(UClass* ComponentType, const TMap<FName, FString>& Parameters)` [MaterialSDFFactory.cpp:~L86-173]
    - `UObject* CreateMaterialSDF(uint32 MaterialType, ECsgOperation Operation, const FIntVector& Resolution, EMaterialBlendMode BlendMode)` [MaterialSDFFactory.cpp:~L242-295]
    - `UObject* CreateMultiMaterialSDF(const TArray<uint32>& MaterialTypes, const FIntVector& Resolution, EMaterialBlendMode BlendMode)` [MaterialSDFFactory.cpp:~L297-352]
    - `static UMaterialSDFFactory* Get()` [MaterialSDFFactory.cpp:~L358-369]
  - Key members:
    - `bool bIsInitialized` [MaterialSDFFactory.h]
    - `FName FactoryName` [MaterialSDFFactory.h]
    - `TSet<UClass*> SupportedTypes` [MaterialSDFFactory.h]
    - `TMap<UClass*, UObject*> Archetypes` [MaterialSDFFactory.h]
    - `TMap<uint32, FMaterialSDFConfig> MaterialConfigs` [MaterialSDFFactory.h]
    - `TScriptInterface<IComponentPoolManager> PoolManager` [MaterialSDFFactory.h]
    - `TScriptInterface<IMaterialPropertyProvider> MaterialPropertyProvider` [MaterialSDFFactory.h]

- `UDistanceFieldFactory` [7_FactorySystem/Public/Factory/DistanceFieldFactory.h, 7_FactorySystem/Private/Factory/DistanceFieldFactory.cpp]
  - Purpose: Factory for creating and managing distance fields with various resolutions and precision levels
  - Implements: IFactory
  - Key methods:
    - `bool Initialize()` [DistanceFieldFactory.cpp:~L29-47]
    - `void Shutdown()` [DistanceFieldFactory.cpp:~L49-70]
    - `UObject* CreateComponent(UClass* ComponentType, const TMap<FName, FString>& Parameters)` [DistanceFieldFactory.cpp:~L86-177]
    - `UObject* CreateDistanceField(const FIntVector& Resolution, int32 MaterialChannels, float NarrowBandWidth, EFieldPrecision Precision)` [DistanceFieldFactory.cpp:~L242-296]
    - `UObject* CreateDistanceFieldFromMesh(UStaticMesh* Mesh, const FIntVector& Resolution, int32 MaterialIndex, EFieldPrecision Precision)` [DistanceFieldFactory.cpp:~L298-335]
    - `static UDistanceFieldFactory* Get()` [DistanceFieldFactory.cpp:~L337-348]
  - Key members:
    - `bool bIsInitialized` [DistanceFieldFactory.h]
    - `FName FactoryName` [DistanceFieldFactory.h]
    - `TSet<UClass*> SupportedTypes` [DistanceFieldFactory.h]
    - `TMap<UClass*, UObject*> Archetypes` [DistanceFieldFactory.h]
    - `TMap<FIntVector, FFieldPoolConfig> FieldPoolConfigs` [DistanceFieldFactory.h]
    - `TScriptInterface<IComponentPoolManager> PoolManager` [DistanceFieldFactory.h]

- `UTransactionContextFactory` [7_FactorySystem/Public/Factory/TransactionContextFactory.h, 7_FactorySystem/Private/Factory/TransactionContextFactory.cpp]
  - Purpose: Factory for creating transaction contexts for operation atomicity
  - Implements: IFactory
  - Key methods:
    - `bool Initialize()`
    - `void Shutdown()`
    - `bool IsInitialized() const`
    - `FName GetFactoryName() const`
    - `bool SupportsType(UClass* ComponentType) const`
    - `UObject* CreateComponent(UClass* ComponentType, const TMap<FName, FString>& Parameters)`
    - `TArray<UClass*> GetSupportedTypes() const`
    - `bool RegisterArchetype(UClass* ComponentType, UObject* Archetype)`
  - Key members:
    - `bool bIsInitialized`
    - `FName FactoryName`
    - `TScriptInterface<IComponentPoolManager> PoolManager`

- `UComponentBuilder` [7_FactorySystem/Public/Factory/ComponentBuilder.h]
  - Purpose: Implementation of the fluent builder interface for component creation
  - Implements: IComponentBuilder
  - Key methods:
    - `IComponentBuilder* WithParameter(const FName& Name, const FString& Value)`
    - `IComponentBuilder* WithParameters(const TMap<FName, FString>& Params)`
    - `IComponentBuilder* WithTransform(const FTransform& Transform)`
    - `IComponentBuilder* WithLocation(const FVector& Location)`
    - `IComponentBuilder* WithRotation(const FRotator& Rotation)`
    - `IComponentBuilder* WithScale(const FVector& Scale)`
    - `UObject* Build()`
    - `UObject* BuildOrGet()`
    - `void Release(UObject* Component)`
    - `static TSharedPtr<UComponentBuilder> CreateBuilder(UClass* ComponentType, bool UsePooling)`
  - Key members:
    - `UClass* TargetType`
    - `TMap<FName, FString> Parameters`
    - `TScriptInterface<IComponentPoolManager> PoolManager`
    - `bool bUsePooling`

### Enumerations and Structures

- `EFactoryOperationType` [7_FactorySystem/Public/Interfaces/IFactoryMetrics.h]
  - Purpose: Defines operation types for factory metrics
  - Values: `Initialize`, `Shutdown`, `Create`, `Return`

- `FFactoryMetrics` [7_FactorySystem/Public/Interfaces/IFactoryMetrics.h]
  - Purpose: Container for factory performance metrics
  - Key members:
    - `int32 TotalOperations`
    - `int32 SuccessCount`
    - `int32 FailureCount`
    - `int32 CacheMisses`
    - `float AverageOperationTimeMs`
    - `float PeakOperationTimeMs`

- `FComponentPoolConfig` [7_FactorySystem/Public/Interfaces/IComponentPoolManager.h]
  - Purpose: Configuration for a component object pool
  - Key members:
    - `FName PoolName`
    - `UClass* ComponentType`
    - `int32 InitialSize`
    - `int32 MaxSize`
    - `bool bPreallocate`
    - `UObject* Template`
    - `EPoolAllocationStrategy AllocationStrategy`

- `FComponentPoolStats` [7_FactorySystem/Public/Interfaces/IComponentPoolManager.h]
  - Purpose: Statistics about a component object pool
  - Key members:
    - `int32 CurrentSize`
    - `int32 AvailableCount`
    - `int32 AllocatedCount`
    - `int32 MaxSize`
    - `int32 TotalAllocations`
    - `int32 CacheMisses`
    - `int32 PeakUsage`

- `EPoolAllocationStrategy` [7_FactorySystem/Public/Interfaces/IComponentPoolManager.h]
  - Purpose: Defines allocation strategies for object pools
  - Values: `FirstAvailable`, `LeastRecent`, `MostRecent`

- `EFieldPrecision` [7_FactorySystem/Public/Factory/DistanceFieldFactory.h]
  - Purpose: Defines precision levels for distance fields
  - Values: `Low`, `Medium`, `High`, `Double`

- `ENodeType` [7_FactorySystem/Public/Factory/SVONodeFactory.h]
  - Purpose: Types of SVO nodes in the system
  - Values: `Internal`, `Leaf`, `Empty`

- `ECsgOperation` [7_FactorySystem/Public/Factory/MaterialSDFFactory.h]
  - Purpose: Constructive solid geometry operations for material SDFs
  - Values: `Union`, `Subtraction`, `Intersection`, `SmoothUnion`, `SmoothSubtract`, `Replace`

- `EMaterialBlendMode` [7_FactorySystem/Public/Factory/MaterialSDFFactory.h]
  - Purpose: Blending modes for material operations
  - Values: `Hard`, `Smooth`, `Fractional`, `Layered`

## Dependencies

### Internal Dependencies
- System 1 (Core Registry System) - For type registration and lookup
- System 2 (Memory Management System) - For memory allocation and tracking
- System 3 (Threading and Async Task System) - For concurrent factory operations
- System 4 (Event System) - For factory creation notifications
- System 6 (Service Registry) - For dependency injection

### External Dependencies
- Unreal Engine Core
- Unreal Engine Object System
- Unreal Engine Garbage Collection

## Navigation Landmarks

### FileStructure: [SVONodeFactory.cpp]
- Singleton setup: ~L10-25
- Initialization: ~L27-48 [SVO_FACTORY_INIT]
- Shutdown: ~L50-69
- Component creation: ~L85-150 [SVO_CREATE_COMPONENT]
- Type registration: ~L165-183
- Node creation methods: ~L317-456 [SVO_CREATE_NODE_IMPL]
- Instance accessor: ~L458-468 [SVO_FACTORY_SINGLETON]
- Node configuration: ~L470-497 [SVO_NODE_CONFIG]
- Memory optimization: ~L499-535 [SVO_MEMORY_OPTIMIZATION]

### FileStructure: [MiningSystemFactory.cpp]
- Singleton setup: ~L10-25
- Initialization: ~L27-47 [MINING_FACTORY_INIT]
- Shutdown: ~L49-68
- Component creation: ~L84-132 [MINING_CREATE_COMPONENT]
- Type registration: ~L242-270 [MINING_REGISTER_TYPES]
- Builder creation: ~L290-306 [MINING_CREATE_BUILDER]
- Instance creation: ~L308-326 [MINING_CREATE_INSTANCE]
- Instance accessor: ~L352-363 [MINING_FACTORY_SINGLETON]

### FileStructure: [MaterialSDFFactory.cpp]
- Singleton setup: ~L10-25
- Initialization: ~L27-47 [MATERIAL_FACTORY_INIT]
- Shutdown: ~L49-70
- Component creation: ~L86-173 [MATERIAL_CREATE_COMPONENT]
- Material SDF creation: ~L242-295 [MATERIAL_SDF_CREATE]
- Multi-material SDF creation: ~L297-352 [MULTI_MATERIAL_SDF_CREATE]
- Property configuration: ~L371-414 [MATERIAL_PROPERTY_CONFIG]
- Blending configuration: ~L416-445 [MATERIAL_BLEND_CONFIG]

### FileStructure: [DistanceFieldFactory.cpp]
- Singleton setup: ~L10-25
- Initialization: ~L27-47 [DF_FACTORY_INIT]
- Shutdown: ~L49-70
- Component creation: ~L86-177 [DF_CREATE_COMPONENT]
- Distance field creation: ~L242-296 [DF_CREATE]
- Mesh-based field creation: ~L298-335 [DF_FROM_MESH]
- Field configuration: ~L350-393 [DF_CONFIG]
- Memory allocation calculation: ~L395-466 [DF_MEMORY_ALLOCATION]
- Pool naming: ~L468-476 [DF_POOL_NAMING]

## Implementation Patterns

### Factory Pattern
- Factories implement the `IFactory` interface
- Each factory specializes in creating a specific category of components
- Factory registry routes creation requests to the appropriate factory
- Singleton pattern used for global factory access

### Object Pooling
- Components can be allocated from pools for reuse
- Pools configured with initial size, maximum size, and allocation strategy
- Components returned to pools after use rather than destroyed
- Pool statistics tracked for optimization

### Archetype-Based Creation
- Registered archetypes used as templates for new instances
- Reduces initialization overhead by copying from template
- Allows for configuration variations while maintaining core behavior

### Parameter-Based Configuration
- Components configured using string-based parameter maps
- Allows for flexible configuration without hard dependencies
- Parameters imported into component properties using reflection

### Memory Optimization
- Specialized memory layouts for different component types
- Narrow-band optimization for distance fields
- Pool sizing based on usage patterns and component characteristics
- Memory preallocated in chunks to reduce fragmentation

### Metrics Collection
- Performance metrics collected for factory operations
- Tracks operation counts, timings, and cache performance
- Used to identify optimization opportunities and bottlenecks

### Builder Pattern
- Fluent interface for component creation and configuration
- Simplifies complex component setup through method chaining
- Encapsulates creation logic and parameter management

### Thread Safety
- Thread-safe factory initialization and shutdown
- Metrics collection uses atomic operations
- Pool allocation designed for concurrent access

## UE5 Integration

### UObject Inheritance
- Factories extend UObject to leverage UE5 reflection system
- Component pools manage UObject lifetime with the garbage collector
- Properties exposed to UE5 property system with UPROPERTY macros

### Reflection
- Factory registration uses UE5 reflection to find component types
- Parameter import leverages FProperty system for type safety
- Component configuration uses reflection for setting properties

### GC Integration
- Factories added to root to prevent garbage collection
- Component pools track object references to prevent premature collection
- Factory shutdown properly handles object cleanup

## Naming Patterns

### Interfaces
- `IInterface` - Interface naming pattern
- `Get()` - Static accessor for singleton interfaces
- `Create*` methods for factory operations
- `Register*` methods for registration operations

### Classes
- `UClassName` - UObject-derived classes
- `FClassName` - Non-UObject structs and classes
- `EEnumName` - Enumeration types

### Member Variables
- `bBooleanVariable` - Boolean prefix
- `FactoryName` - No prefix for standard variables
- `TMap`, `TArray`, `TSet` - Template containers

### Methods
- `Initialize()`, `Shutdown()` - Lifecycle methods
- `Create*` - Factory creation methods
- `Get*` - Accessor methods
- `With*` - Builder pattern methods
- `Configure*` - Configuration methods

## Potential Naming Conflicts

- Multiple `Initialize()` and `Shutdown()` methods across different factory classes
- `CreateComponent()` method appears in all factory implementations with similar signatures
- Multiple factory `Get()` static methods returning singletons
- `GetFactoryName()` vs `FactoryName` member variable
- `PoolManager` used in multiple classes (consistent naming, not a conflict)

## Architectural Boundaries

- Memory allocation spans both Factory System (7) and Memory Management System (2)
- Component lifecycle management shared between Factory System (7) and Core Registry (1)
- Threading concerns overlap with Threading and Async Task System (3)
- Zone management split between Zone Factory and Region Manager (18)

## Known Issues & Constraints

- Performance impact of string-based parameter passing
- Factory implementations have high code duplication
- Potential thread safety issues in pool allocation during high concurrency
- Memory overhead of maintaining multiple specialized pools
- Narrow-band optimization requires careful tuning of width parameters
- Material type handling split across multiple systems

## Future Improvements

- Consider template-based factory approach to reduce cast overhead
- Implement heat-based pool sizing for automatic optimization
- Add detailed performance instrumentation for bottleneck identification
- Factor common code from factories into a shared base class
- Expand builder pattern to cover more complex component creation scenarios